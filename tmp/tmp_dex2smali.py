# encoding: utf-8
import os
import config
import log
import utils
import db_apis

LOG_FILE = "tmp_dex2smali.txt"

def decompile_smali(dex_path, des_path):
    try:
        smali_jar_path = config.LIB_BAKSMALI_PATH
        cmd = "java -jar {0} d {1} -o {2}".format(smali_jar_path, dex_path, des_path)
        os.system(cmd)
        print(cmd)
    except Exception as e:
        log.print_and_write(LOG_FILE, e, type="ERROR", remark=dex_path)

def get_valid_java_dir_path():
    decompress_dir_paths = utils.get_files_from_dir(config.DATA_MALWARE_DECOMPRESS_PATH)
    print("Total get {0} decompress dir paths".format(len(decompress_dir_paths)))

    java_dir_paths = utils.get_files_from_dir(config.DATA_MALWARE_DECOMPILE_JAVA_PATH)
    java_dir_paths = list(x.split("\\")[-1] for x in java_dir_paths)
    print("Total get {0} java dir paths".format(len(java_dir_paths)))

    res=[]
    count = 0
    for decompress_dir_path in decompress_dir_paths:
        if decompress_dir_path.split("\\")[-1] in java_dir_paths:
            count += 1
            if count % 100 == 0:
                print(count," pass")
            res.append(decompress_dir_path)

    print("Total get {0} decompress dir paths".format(len(decompress_dir_paths)))
    print("Total get {0} java dir paths".format(len(java_dir_paths)))
    print("{0} files pass the filter".format(count))

    return res

if __name__ == "__main__":

    pkl_path = "valid_java_dirs.pkl"
    if os.path.exists(pkl_path):
        dir_paths = utils.load_pkl(pkl_path)
    else:
        dir_paths = get_valid_java_dir_path()
        utils.save_pkl(dir_paths,pkl_path)

    log.print_and_write(LOG_FILE,"Total get {0} valid decompress dir paths".format(len(dir_paths)))

    des_paths = []
    for dir_path in dir_paths:
        des_path = os.path.join(config.DATA_MALWARE_DECOMPILE_SMALI_PATH,dir_path.split("\\")[-1])
        if os.path.exists(des_path) == False:
            des_paths.append((dir_path,des_path))

    log.print_and_write(LOG_FILE,"{0} files has been decompiled".format(len(dir_paths)-len(des_paths)))

    log.print_and_write(LOG_FILE, "{0} files need to decompiled".format(len(des_paths)))
    count = len(des_paths)
    for src_path, des_path in des_paths:
        dex_path = os.path.join(src_path,"classes.dex")
        decompile_smali(dex_path,des_path)
        count -= 1
        print("{0} files need to decompiled".format(count))





